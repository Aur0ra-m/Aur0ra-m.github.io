<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Aur0ra Blog</title>
        <link>https://aur0ra.cn/posts/</link>
        <description>All Posts | Aur0ra Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>Anonymous@xx.com (Aur0ra)</managingEditor>
            <webMaster>Anonymous@xx.com (Aur0ra)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 14 Feb 2023 08:00:00 &#43;0800</lastBuildDate><atom:link href="https://aur0ra.cn/posts/" rel="self" type="application/rss+xml" /><item>
    <title>APIKiller -- 一款漏洞扫描（神）器</title>
    <link>https://aur0ra.cn/3-apikiller/</link>
    <pubDate>Tue, 14 Feb 2023 08:00:00 &#43;0800</pubDate>
    <author>Aur0ra</author>
    <guid>https://aur0ra.cn/3-apikiller/</guid>
    <description><![CDATA[APIKiller &ndash; 一款漏洞扫描（神）器  Github项目直通车：APIKiller API Security Tool
 项目背景 去年有幸进入字节无恒实验室实习，并负责抖音的安全SDLC工作，在期间挖的众多漏洞重发现很多问题都是IDOR这类的越权问题，当时想的就是能不能自动化识别啥的，毕竟一直这样也挺低效的（其实字节是有IDOR相关的DAST工具，只是有些没覆盖到），所以项目名称原本叫IDORKiller。但是最近写着写着，想着索性做成工程化的工具，于是在原有的基础上，进行整体结构上的优化，时期能够保证高效、易拓展的特性，于是就有了现在的APIKiller项目。
项目介绍 Feature
 支持HTTP/HTTPS流量检测 多来源检测  支持流量监听 支持历史流量回扫   多功能扫描模块  越权检测模块，高效精准，支持多情景检测  具备多角色账号、单角色账号测试能力【单角色账号测试暂不启用，黑盒师傅有想法的可以直接看文档中的介绍，或私下交流】 多维度、特征化判断引擎   csrf检测模块  支持token检测 常见的referer、origin检测   【欢迎大家一起来开发新的模块】   多功能Filter处理，默认自带多个filter  针对性扫描，例如只对 baidu.com域名进行扫描 去重扫描，提高效率 自动过滤静态文件(js,gif,jpg,png,css,jpeg,xml,img,svg&hellip;)   API 运维  提供简易的API Security运维平台   多方式漏洞发现提醒  Lark飞书 &hellip;   对抗常见风控手段  频控     由于多处核心组件采用了抽象的方式，所以可以给有需要的使用者进行快速的二次开发（二次开发的文档，后续将会补齐）
 越权检测模块  越权检测既定分为三个子模块：未授权检测模块、单角色检测模块、多角色检测模块；但单角色检测模块和未授权检测模块存在较大优化空间，所以当前采用简易模式，仅能够适用于甲方日常，如果想用去扫描，则可以手动开启，或加以改造]]></description>
</item>
<item>
    <title>子域名接管安全性分析及落地化</title>
    <link>https://aur0ra.cn/1/</link>
    <pubDate>Mon, 06 Jun 2022 22:56:41 &#43;0800</pubDate>
    <author>Aur0ra</author>
    <guid>https://aur0ra.cn/1/</guid>
    <description><![CDATA[子域名接管安全性分析及落地化  能说只是为了学Go嘛？33333 Github项目直通车
 简介   子域名接管，主要原因归结于失效dns记录未删除。
譬如，一条指向test.sec.com的CNAME记录未被删除，而test.sec.com已被注销，这个时候，如果攻击者如果注册了该域名，那么该子域名就会指向一个可控的主机或者域名上。
 CNAME记录是最常被利用的，但其实A记录，NS记录等其他DNS记录也存在被接管的可能。
   那么子域名在实战中又能发挥哪些作用？
  记得红队钓鱼时有一个钓鱼网站的操作，而往往为了更逼真，获取更高的可信度，往往将域名设置为一个和原域名很相似的域名。而如果能直接接管子域名中的CNAME记录，那岂不是很nice。所以子域名接管的利用主要就是为了高度伪造目标站点，提供高伪装性。
  其他危害
    DNS  DNS主要就是将好记得域名解析为不好记的IP地址
 DNS文档-RFC1034
DNS文档2-RFC1035
从1034到1035新增了几个记录，当下共有16中DNS记录，简要介绍其中和当前分析有关的几个记录类型：
 A	记录域名指向的主机ip NS 域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析 CNAME 别名记录，允许您将多个名字映射到同一台计算机 MX 邮件交换记录，它指向一个邮件服务器  DNS记录与子域名接管 从上面几个DNS记录来看，如果是A记录，由于ip的可控性很低，虽然也存在类似的服务，例如弹性公网ip申请之类的，所以暂不考虑A记录的接管。而如果记录是指向一个域名的话，则往往可控性更高，可利用性也就更高。
Subtaker项目 有了上面的知识，现在就开始落地化了。
项目需求  判断记录是否被注销，可被重新申请注册 记录指向是否间接可控，例如github page  设计思路  读取字典，遍历子域名的CNAME,MX记录 对收集到的记录进行分别判断其是否可注册 继续对CNAME记录进行指纹识别，看是否为间接可控 输出结果  存在的问题或者关键点  CNAME链解决(这里也许有什么CNAME-&gt;MX记录，但实战中存在的可能性较低，相反工具的性能降低，所以只对CNAME记录链进行处理) 线程控制实现方法：采用了信号量+锁的方式 高并发性的同时，怎么确保域名查询注册接口进行有效反馈？随机切换查询API+状态码判断 单个子域名对应多个记录，go中的net解析时被当作CNAME记录 奇奇怪怪的域名解析处理：CNAME解析最后一直返回同样的记录！MX记录进行CNAME记录查询解析竟然也会返回CNAME记录&ndash;》调换了MX记录和CNAME记录的判断顺序，但无疑会影响解析速度 部分页面例如Github是属于外网，访问速度很慢，或者干脆不能访问，这直接影响结果的准确率&ndash;》你们懂的   https://github.]]></description>
</item>
<item>
    <title>jdk原生链分析</title>
    <link>https://aur0ra.cn/2/</link>
    <pubDate>Mon, 16 May 2022 22:56:41 &#43;0800</pubDate>
    <author>Aur0ra</author>
    <guid>https://aur0ra.cn/2/</guid>
    <description><![CDATA[作为jdk中目前发现的原生链，还是有必要要分析这个用法的。全文仅限尽可能还原挖掘思路
 JDK7u21 在很多链中，TemplatesImpl一直发挥着不可或缺的作用，它是位于jdk源码中的一段Gadget:getOutputProperties()-&gt;newTransformer()-&gt;getTransletInstance()-&gt;...
 templatesImpl利用回顾:
 加载对象需要是com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet的实现类 需要设置_name,_bytecodes _tfactory属性在高版本需要设置，jdk7u21中不是必须，看jdk版本而言-》defineTransletClasses   其中只要能触发上述任意一个函数的，都可以完成TemplatesImpl的动态加载字节码功能。
1. 所以我们看jdk中是否有调用这三个函数?
还记得sun.reflect.annotation.AnnotationInvocationHandler嘛？这可是java反序列化中的重要角色。而jdk7u21算是对其利用的再挖掘。
为了简单直接，我把反编译的代码中的var变量替换了自定义变量
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  //AnnotationInvocationHandler.javaprivate Boolean equalsImpl(Object var1) {if (var1 == this) {return true;} else if (!]]></description>
</item>
<item>
    <title>Hello World</title>
    <link>https://aur0ra.cn/hello/</link>
    <pubDate>Wed, 11 May 2022 22:56:41 &#43;0800</pubDate>
    <author>Aur0ra</author>
    <guid>https://aur0ra.cn/hello/</guid>
    <description><![CDATA[Hello Aur0ra ]]></description>
</item>
</channel>
</rss>
